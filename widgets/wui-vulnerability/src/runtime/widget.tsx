import React, { useState, useEffect, useRef } from "react";

import { type AllWidgetProps, getAppStore, appActions, MutableStoreManager, ReactRedux, type WidgetProps, WidgetManager, type IMState, WidgetState, DataSourceComponent, DataSourceManager, dataSourceUtil  } from 'jimu-core'
const { useSelector, useDispatch } = ReactRedux
import { JimuMapViewComponent, JimuMapView, MapViewManager } from "jimu-arcgis";
import MapView from 'esri/views/MapView'
import type WebMap from 'esri/WebMap'
import { 
    Container, 
    Row, 
    Button, 
    AdvancedButtonGroup,
    Label, 
    Loading, 
    CollapsablePanel, 
    CollapsableCheckbox, 
    CollapsableRadio, 
    Tooltip, 
    Radio,
    Switch,
    Select,
    Option,
    Checkbox
} from "jimu-ui";

import { LayerOutlined } from 'jimu-icons/outlined/gis/layer'
import { InfoOutlined } from 'jimu-icons/outlined/suggested/info'
import { WidgetSwipeOutlined } from 'jimu-icons/outlined/brand/widget-swipe'
import { MergeLayersOutlined } from 'jimu-icons/outlined/gis/merge-layers'
import { PlusOutlined } from 'jimu-icons/outlined/editor/plus'
import { CloseOutlined } from 'jimu-icons/outlined/editor/close'
import { ArrowUpDownOutlined } from 'jimu-icons/outlined/directional/arrow-up-down'
import { FeatureLayerViewOutlined } from 'jimu-icons/outlined/gis/feature-layer-view'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faFolder, faFolderOpen, faCircleDown } from '@fortawesome/free-regular-svg-icons'
import { faHandHoldingHand, faHouseFire } from '@fortawesome/free-solid-svg-icons'

import Color from "@arcgis/core/Color.js";
import Swipe from "@arcgis/core/widgets/Swipe.js";
import reactiveUtils from "esri/core/reactiveUtils";

import { type IMConfig } from '../config'
import './lib/style.css'


export default function (props: AllWidgetProps<IMConfig>) {
    const [widgetLoading, setWidgetLoading] = useState(true);
    const [layerLoading, setLayerLoading] = useState(false);

    const [dataSource, setDataSource] = useState(null);
    const [view, setView] = useState(null);
    const [view2, setView2] = useState(null);
    const [map, setMap] = useState(null);
    const [map2, setMap2] = useState(null);
    const [mapLayers, setMapLayers] = useState(null);
    const [map2Layers, setMap2Layers] = useState(null);

    const [mapType, setMapType] = useState('bivariate')
    const [prevMapType, setPrevMapType] = useState('bivariate')
    
    const [selectedCategory, setSelectedCategory] = useState(null)
    const [selectedVariable, setSelectedVariable] = useState(null)
    const [selectVariables, setSelectVariables] = useState([])
    
    const [selectMetrics, setSelectMetrics] = useState(null)
    const [selectedMetric, setSelectedMetric] = useState(null)

    const [wuiChecked, setWuiChecked] = useState(false)

    const [activeLayer, setActiveLayer] = useState(null);
    const [layerLegend, setLayerLegend] = useState(null);

    const [countyBoundaries, setCountyBoundaries] = useState(null);

    const [activeCompare, setActiveCompare] = useState(false);
    const [swipeWidget, setSwipeWidget] = useState(null);
    const [swipeWidgetPositionOffset, setSwipeWidgetPositionOffset] = useState(1);

    const [swipeLeadingLayers, setSwipeLeadingLayers] = useState([]);
    const [swipeTrailingLayers, setSwipeTrailingLayers] = useState([]);
    const [swipeLeadingLayerTitle, setSwipeLeadingLayerTitle] = useState(null);
    const [swipeTrailingLayerTitle, setSwipeTrailingLayerTitle] = useState(null);
    const [swipeLeadingLayersActive, setSwipeLeadingLayersActive] = useState(false);
    const [swipeTrailingLayersActive, setSwipeTrailingLayersActive] = useState(false);
    
    const [swipeLeadingLayersSettings, setSwipeLeadingLayersSettings] = useState({
        layer: null,
        category: null,
        variable: null,
        metric: null,
        mapType: 'bivariate'
    });
    const [swipeTrailingLayersSettings, setSwipeTrailingLayersSettings] = useState({
        layer: null,
        category: null,
        variable: null,
        metric: null,
        mapType: 'bivariate'
    });
    const [compareLayerElementClicked, setCompareLayerElementClicked] = useState(null);

    const [sideBySideMapId, setSideBySideMapId] = useState(null)
    const [sideBySidePanelId, setSideBySidePanelId] = useState(null)

    const [swipeActive, setSwipeActive] = useState(false)
    const [sideBySideActive, setSideBySideActive] = useState(false)
    
    const [isOpen, setIsOpen] = useState(false)
    
    const [wuiVulnerabilityWidgetId, setWuiVulnerabilityWidgetId] = useState(null)
    const [wuiDataExplorerWidgetId, setWuiDataExplorerWidgetId] = useState(null)
    const [wuiGrowthWidgetId, setWuiGrowthWidgetId] = useState(null)
    
    const [includeSwipeCompare, setIncludeSwipeCompare] = useState(true)
    const [hideSwipeCompare, setHideSwipeCompare] = useState(false)
    
    const [isMainMapPanel, setIsMainMapPanel] = useState(true)
    
    let tooltips = {
        'Overall': {
            'main': 'A community’s overall vulnerability score combining environmental, social, economic, and infrastructure effects on neighborhood-level stability.',
            'CVI': 'A community’s overall vulnerability score combining environmental, social, economic, and infrastructure effects on neighborhood-level stability.',
        }, 
        'Baseline': {
            'main': 'Reflects factors that may reduce resilience or are potential sources of long-standing community inequity or injustice and is divided into four categories: Health, Social & Economic, Infrastructure, and Environment.',
            'Health': 'Factors reflecting baseline or overall state of population health.',
            'Social': 'Social and economic stressors that impact community resilience.',
            'Infrastructure': 'Essential structures, services, resources that affect community resilience.',
            'Environment': 'Environmental factors that pose a threat to a community’s wellbeing.',
            'Adults': '',
            'Housing': '',
            'All': 'Combination of all factors that reduce resilience or contribute to community inequity or injustice.',
        },
        'Climate': {
            'main': 'Reflects both direct and indirect impacts, and is divided into three risk categories: Health, Social & Economic, and Extreme Events.',
            'Social': 'Social and economic costs and impacts associated with change in climate.',
            'Health': 'Expected changes in community health resulting from warming climate.',
            'Extreme': 'Historical and projected extreme weather event occurrences.',
            'All': 'Combination of all factors that impact resilience to the impacts of climate change.',
        }
    }
    
    const categories = [
        { id: 'Overall' , label:'Overall'},
        { id: 'Baseline', label: 'Baseline' },
        { id: 'Climate', label: 'Climate Change' }
    ]
    
    const variables = [
        { id: 'CVI', label: 'Climate Vulnerability Index (CVI)', category: ['Overall'] },
        { id: 'Overall', label: 'Overall', category: ['Baseline', 'Climate'] },
        { id: 'Health', label: 'Health', category: ['Baseline', 'Climate'] },
        { id: 'Social', label: 'Social and Economic', category: ['Baseline', 'Climate'] },
        { id: 'Infrastructure', label: 'Infrastructure', category: ['Baseline'] },
        { id: 'Environment', label: 'Environment', category: ['Baseline'] },
        { id: 'Extreme', label: 'Extreme Events', category: ['Climate'] }
    ]
    
    const metrics = [
        { id: 'Overall', label: 'Overall', category: '*', variable: '*' },
        { id: 'Poverty', label: 'Below Poverty', category: ['Baseline'], variable: ['Social'] },
        { id: 'Income', label: 'Low Income', category: ['Baseline'], variable: ['Social'] },
        { id: 'Minority', label: 'Minority', category: ['Baseline'], variable: ['Social'] },
        { id: 'Crowding', label: 'Crowding', category: ['Baseline'], variable: ['Social'] },
        { id: 'Adults', label: 'Adults Age 65 and Older', category: ['Baseline'], variable: ['Social'] },
        { id: 'Housing', label: 'Housing Units Built 1940 - 1969', category: ['Baseline'], variable: ['Social'] },
        
        { id: 'Flooding', label: 'Flooding Risk (Roads)', category: ['Baseline'], variable: ['Infrastructure'] },
        
        { id: 'Flooding', label: 'Flooding Risk (Properties)', category: ['Climate'], variable: ['Social'] },
        { id: 'Wildfire', label: 'Wildfire Risk (Properties)', category: ['Climate'], variable: ['Social'] },
        
        { id: 'Wildfire', label: 'Wildfire Annualized Frequency', category: ['Climate'], variable: ['Extreme'] },
        { id: 'Coastal', label: 'Coastal Flooding Annualized Frequency', category: ['Climate'], variable: ['Extreme'] },
        { id: 'Riverine', label: 'Riverine Flooding Annualized Frequency', category: ['Climate'], variable: ['Extreme'] },
    ]
    
    const widgetState = useSelector((state: IMState) => {
        let widgetState = null;
        if (sideBySidePanelId) {
            widgetState = state.widgetsState[sideBySidePanelId]
        }
        return widgetState
    })
    
    const sideBySidePanelCollapse = useSelector((state: IMState) => {
        let value = null;
        if (sideBySidePanelId) {
            value = state.widgetsState[sideBySidePanelId].collapse;
        }
        return value
    })
    const dispatch = useDispatch();
    
    useEffect(() => {
        setHideSwipeCompare(sideBySidePanelCollapse);
        if (sideBySidePanelCollapse) {
            setActiveCompare(false);
            if (!isMainMapPanel) {
                setIsOpen(false);
                resetWidget();
            }
        }
        
    }, [sideBySidePanelCollapse, dispatch])
    
    const toggleMapSidebarWidget = (openState) => {
        if (widgetState && Object.hasOwn(widgetState, "collapse") {
            let collapseState = widgetState.collapse;
            getAppStore().dispatch(appActions.widgetStatePropChange(sideBySidePanelId, "collapse", openState));
        }
    };
    
    const sendWidgetMessages = () => {
        getAppStore().dispatch(appActions.widgetStatePropChange(wuiGrowthWidgetId, "activeWidgetId", Math.random()));
        getAppStore().dispatch(appActions.widgetStatePropChange(wuiDataExplorerWidgetId, "activeWidgetId", Math.random()));
    }
    
    useEffect(() => {
        if (props) {
            //console.log(props);
            let appConfig = getAppStore().getState().appConfig;
            let widgets = Object.values(appConfig.widgets);
            
            let currentWidgetType = props.label.split('-').pop();
            setIsMainMapPanel(currentWidgetType == 'main');
            
            let mapWidget = widgets.find(w => w.label == 'Map 2')
            if (mapWidget) {
                setSideBySideMapId(mapWidget.id);
            }
            
            let sidebarWidget = widgets.find(w => w.label == 'Side by Side Maps')
            if (sidebarWidget) {
                setSideBySidePanelId(sidebarWidget.id);
            }
            
            let growthWidget = widgets.find(w => w.label == `wui-growth-${currentWidgetType}`);
            if (growthWidget) {
                setWuiGrowthWidgetId(growthWidget.id);
            }
            
            let dataExplorerWidget = widgets.find(w => w.label == `layer-control-${currentWidgetType}`);
            if (dataExplorerWidget) {
                setWuiDataExplorerWidgetId(dataExplorerWidget.id);
            }
            
            let vulnerabilityWidget = widgets.find(w => w.label == `wui-vulnerability-${currentWidgetType}`);
            if (vulnerabilityWidget) {
                setWuiVulnerabilityWidgetId(vulnerabilityWidget.id);
            }

        }
    }, [props])
    
    useEffect(() => {
        if (props.stateProps) {
            if (isOpen) {
                //console.log(props.stateProps);
                setIsOpen(false);
            }
        
        }
    }, [props.stateProps])
    
    useEffect(() => {
        if (dataSource && sideBySideMapId) {
            let mvManager = MapViewManager.getInstance()
            mvManager.createJimuMapView({
                mapWidgetId: sideBySideMapId,
                view: new MapView({ map: dataSource.map }),
                dataSourceId: dataSource.id,
                isActive: true,
                mapViewManager: mvManager
            }).then(jimuMapView => {
                setView2(jimuMapView.view);
            })
        
        }
    }, [dataSource, sideBySideMapId])

    useEffect(() => {
        if (view) {
            setMap(view.map);
            reactiveUtils.when(
                () => !view.updating,
                () => {
                    setLayerLoading(false);
                }
            )
        }
    }, [view])

    useEffect(() => {
        if (view2) {
            setMap2(view2.map)
        }
    }, [view2])

    useEffect(() => {
        if (map) {
            setMapLayers(map.allLayers.items)
        }
    }, [map])

    useEffect(() => {
        if (map2) {
            setMap2Layers(map2.allLayers.items)
        }
    }, [map2])

    useEffect(() => {
        if (mapLayers) {
            setWidgetLoading(false);

            let county = mapLayers.find((l) => { return l.title.includes('County') })
            setCountyBoundaries(county)
        }
    }, [mapLayers])

    useEffect(() => {
        if (activeLayer) {
            let legendNode = null
            if (mapType == "bivariate") {
                legendNode = createBivariateLegend(activeLayer);
            } else if (mapType == "univariate") {
                legendNode = createUnivariateLegend(activeLayer);
            }
            setLayerLegend(legendNode);
        }
    }, [activeLayer])

    useEffect(() => {
        if (mapLayers) {
            toggleReferenceLayers("Non-WUI", wuiChecked)
        }
    }, [wuiChecked])
    
    function toggleReferenceLayers(titleElement, visible) {
        let groupReference = mapLayers.find((l) => { return l.type == "group" && l.title.includes("Reference") })
        let layers = groupReference.allLayers.items.filter((l) => { return l.title.includes(titleElement) })
        layers.forEach((layer) => {
            layer.visible = visible;
        })
    }
    
    function resetWidget() {
        clearLayersFromCompare();
        setSwipeActive(false);
        setSideBySideActive(false);
        //toggleMapSidebarWidget(false);
        if (swipeWidget) {
            swipeWidget.destroy();
        }
        setActiveCompare(false);
        
        setSelectedCategory(null);
        setSelectedVariable(null);
        if (activeLayer) {
            activeLayer.visible = false;
            setActiveLayer(null)
        }
        setMapType("bivariate");
        setPrevMapType("bivariate");
        
        setWuiChecked(false);
    }

    function createUnivariateLegend(layer) {
        let renderer = layer.renderer

        let colors = []
        let labels = []
        let infos = renderer.classBreakInfos;
        infos.forEach((v) => {
            let f = v.symbol.data.symbol.symbolLayers.find(l => l.type == 'CIMSolidFill')
            let color = new Color(f.color.slice(0, 4)).toHex()
            colors.unshift(color)
            labels.unshift(v.label)
        })
        
        let title = ""
        if (selectedVariable) {
            if (selectedMetric == "Overall") {
                title = layer.title.replace(" (Overall)", "");
            } else {
                title = selectedMetric ? metrics.find(m => m.id == selectedMetric).label : ""
            }
        }
        title = title.replace(" Annualized Frequency", "")

        let symbolNode = (
            <div className="d-flex flex-row justify-content-center pt-2 pb-2"
                style={{ width: "185px" }}
            >
                <div
                    style={{
                        display: "flex" 
                        width: "20px",
                        height: "90px",
                        marginRight: "5px",
                    }}
                >
                    <div
                        style={{
                            fontSize: "10px",
                            flex: "0 0 15px",
                            display: "flex",
                            justifContent: "center",
                            alignItems: "center",
                        }}
                    >
                        <div
                            style={{
                                fontSize: "10px",
                                rotate: "-90deg",
                                textAlign: "center",
                                lineHeight: 1,
                                width: "110px",
                                height: "100px",
                                position: "relative",
                                top: "5px",
                            }}
                        >
                            {title}
                        </div>
                    </div>
                </div>
                <div className="d-flex flex-column align-items-center">
                    {
                        colors.map((color, i) => {
                            let labelStyle = {
                                width: "auto",
                                height: "20px",
                                lineHeight: "20px",
                                position: "relative",
                                top: "0px",
                                textAlign: "left",
                                fontSize: "12px"
                            }
                            let symbolStyle = {
                                width: "20px",
                                height: "20px",
                                backgroundColor: color
                            }
                            return <div className="w-100 d-flex flex-row">
                                <div className="mt-0 d-flex align-items-center justify-content-center" style={symbolStyle}></div>
                                <div className="mt-0 ml-2" style={labelStyle}>
                                    {labels[i]}
                                </div>
                            </div>
                        })
                    }
                </div>
            </div>
        )
        return symbolNode
    }

    function createBivariateLegend(layer) {
        let renderer = layer.renderer

        let values = renderer.uniqueValueInfos.map(v => return v.value);
        let var1 = [...new Set(values.map(v => return v.split(' - ')[0]))];
        let var2 = [...new Set(values.map(v => return v.split(' - ')[1]))];
        var2.reverse()

        let title1 = layer.title.split(' & ')[0].split(' (')[0]
        let title2 = layer.title.split(' & ')[1].split(' (')[0]

        let colors = {}
        let baseSymbol = renderer.uniqueValueInfos[0].symbol
        if (baseSymbol.type == "cim") {
            renderer.uniqueValueInfos.forEach((v) => {
                let f = v.symbol.data.symbol.symbolLayers.find(l => l.type == 'CIMSolidFill')
                let color = new Color(f.color.slice(0, 4)).toHex()
                colors[v.value] = color
            })
        }

        let symbolNode = (
            <div
                className="mt-3 mb-2 ml-2 bivariate"
            >
                <div>
                    <div
                        className="d-flex flex-row"
                    >
                        <div
                            style={{
                                display: "flex" 
                                width: "20px",
                                height: "90px",
                                marginRight: title1.length > 18 ? "5px" : "-2px",
                            }}
                        >
                            <div
                                style={{
                                    fontSize: "10px",
                                    flex: "0 0 15px",
                                    display: "flex",
                                    justifContent: "center",
                                    alignItems: "center",
                                }}
                            >
                                <div
                                    style={{
                                        fontSize: "10px",
                                        rotate: "-90deg",
                                        textAlign: "center",
                                        lineHeight: 1,
                                        width: "90px",
                                        height: "90px",
                                    }}
                                >
                                    {title1}
                                </div>
                            </div>
                        </div>

                        <div
                            style={{
                                display: "flex" 
                                width: "20px",
                                height: "90px",
                                marginRight: "-5px",
                                overflow: "hidden",
                            }}
                        >
                            <div
                                style={{
                                    fontSize: "10px",
                                    display: "flex",

                                    alignItems: "center",
                                }}
                            >


                                <div
                                    style={{
                                        fontSize: "10px",
                                        rotate: "-90deg",
                                        display: "flex",
                                        justifyContent: "space-between",
                                        marginLeft: "-40px",
                                    }}
                                >
                                    <div
                                        style={{
                                            fontSize: "10px",
                                            width: "45px",
                                            textAlign: "left",
                                        }}
                                    >
                                        Low
                                    </div>
                                    <div
                                        style={{
                                            fontSize: "10px",
                                            width: "45px",
                                            textAlign: "right",
                                        }}
                                    >
                                        High
                                    </div>
                                </div>

                            </div>
                        </div>



                        <div className="d-flex flex-column">

                            <div>
                                {var1.map((row, i) => {
                                    return (
                                        <div
                                            key={row}
                                            className="d-flex flex-row"
                                            style={{ height: "30px" }}
                                        >
                                            {var2.map((col, j) => {
                                                return (
                                                    <div
                                                        key={`${row} - ${col}`}
                                                        className={col}
                                                        style={{
                                                            width: "30px",
                                                            height: "30px",
                                                            border: "none",
                                                            background: Object.keys(colors).length > 0 ? colors[`${row} - ${col}`] : "#ffffff",
                                                        }}
                                                    />
                                                );
                                            })}
                                        </div>
                                    )
                                })}
                            </div>

                            <div
                                style={{
                                    fontSize: "10px",
                                    display: "flex",
                                    justifyContent: "space-between",
                                }}
                            >
                                <div
                                    style={{
                                        fontSize: "10px",
                                        width: "45px",
                                        textAlign: "left",
                                    }}
                                >
                                    Low
                                </div>
                                <div
                                    style={{
                                        fontSize: "10px",
                                        width: "45px",
                                        textAlign: "right",
                                    }}
                                >
                                    High
                                </div>
                            </div>

                            <div
                                style={{
                                    fontSize: "10px",
                                    textAlign: "center",
                                }}
                            >
                                {title2}
                            </div>


                        </div>


                    </div>

                </div>
            </div>
        );

        return symbolNode
    }

    useEffect(() => {
        if (activeCompare) {
            createSwipeWidget()
        } else {
            clearLayersFromCompare()
        }
    }, [activeCompare])

    useEffect(() => {
        if (activeCompare) {
            if (swipeActive && swipeWidget) {
                swipeWidget.leadingLayers.forEach((l) => { l.visible = false })
                swipeWidget.trailingLayers.forEach((l) => { l.visible = false })
                
                swipeWidget.leadingLayers = swipeLeadingLayers
                swipeWidget.trailingLayers = swipeTrailingLayers

                swipeWidget.leadingLayers.forEach((l) => { l.visible = true })
                swipeWidget.trailingLayers.forEach((l) => { l.visible = true })

                refreshSwipeWidget()
            }

            if (sideBySideActive) {
                let leadingLayerIds = swipeLeadingLayers.map((l) => { return l.id })
                console.log(leadingLayerIds)
                mapLayers.forEach((l) => {
                    if (l.type == 'feature') {
                        l.visible = leadingLayerIds.includes(l.id)
                    }
                })

                let trailingLayerIds = swipeTrailingLayers.map((l) => { return l.id })
                console.log(trailingLayerIds)
                map2Layers.forEach((l) => {
                    if (l.type == 'feature') {
                        l.visible = trailingLayerIds.includes(l.id)
                    }
                })
            }
        }
    }, [activeCompare, swipeLeadingLayers, swipeTrailingLayers, swipeActive, sideBySideActive])
    
    useEffect(() => {
        if (compareLayerElementClicked == null) {
            //if (activeCompare && activeLayer && swipeLeadingLayers.length > 1 && swipeTrailingLayers.length > 1) {
            if (activeCompare && activeLayer) {
                if (swipeLeadingLayersActive) {
                    addActiveLayerToCompare("leading")
                }
                
                if (swipeTrailingLayersActive) {
                    addActiveLayerToCompare("trailing")
                }
            }
        } else {
            let settings = compareLayerElementClicked == "leading" ? swipeLeadingLayersSettings : swipeTrailingLayersSettings;
            setMapType(settings.mapType);
            setSelectedCategory(settings.category);
            setSelectedVariable(settings.variable);
            setSelectedMetric(settings.metric);
            setActiveLayer(settings.layer);
        }
    }, [activeCompare, swipeLeadingLayersActive, swipeTrailingLayersActive, activeLayer, compareLayerElementClicked])
    
    function addActiveLayerToCompare(position) {
        if (activeLayer) {
            if (position == "leading") {
                let layer = mapLayers.find((l) => { return l.id == activeLayer.id })
                setSwipeLeadingLayers([countyBoundaries, layer])
                setSwipeLeadingLayerTitle(layer.title);
                updateActiveLayerForCompareSettings("leading");
                if (swipeTrailingLayers.length == 0 || !swipeTrailingLayerTitle) {
                    setSwipeTrailingLayers([countyBoundaries])
                }
            }

            if (position == "trailing") {
                let layer = mapLayers.find((l) => { return l.id == activeLayer.id })
                setSwipeTrailingLayers([countyBoundaries, layer])
                setSwipeTrailingLayerTitle(layer.title);
                updateActiveLayerForCompareSettings("trailing");
                if (swipeLeadingLayers.length == 0 || !swipeLeadingLayerTitle) {
                    setSwipeLeadingLayers([countyBoundaries])
                }
            }
        }
    }

    function removeActiveLayerFromCompare(position) {
        if (activeCompare) {
            if (position == "leading") {
                swipeWidget.leadingLayers.forEach((l) => { l.visible = false })
                setSwipeLeadingLayers([countyBoundaries])
                setSwipeLeadingLayerTitle(null);
                updateActiveLayerForCompareSettings("leading", true);
            }

            if (position == "trailing") {
                swipeWidget.trailingLayers.forEach((l) => { l.visible = false })
                setSwipeTrailingLayers([countyBoundaries])
                setSwipeTrailingLayerTitle(null);
                updateActiveLayerForCompareSettings("trailing", true);
            }
        }
    }
    
    function updateActiveLayerForCompareSettings(position, clear=false) {
        let settings = {
            layer: clear ? null : activeLayer,
            category: clear ? null : selectedCategory,
            variable: clear ? null : selectedVariable,
            metric: clear ? null : selectedMetric,
            mapType: clear ? 'bivariate' : mapType
        };
        if (position == "leading") {
            setSwipeLeadingLayersSettings({...settings});
        }
        
        if (position == "trailing") {
            setSwipeTrailingLayersSettings({...settings});
        }
    }
    
    function clearLayersFromCompare() {
        if (swipeActive || sideBySideActive) {
            setSwipeActive(false)
            setSideBySideActive(false)

            if (swipeWidget) {
                swipeWidget.destroy();
            }
            setSwipeLeadingLayerTitle(null)
            setSwipeTrailingLayerTitle(null)

            let layers = [countyBoundaries]
            let layerIds = layers.map((l) => { return l.id })
            setSwipeLeadingLayers([countyBoundaries])
            setSwipeTrailingLayers([countyBoundaries])

            mapLayers.forEach((l) => {
                if (l.type == 'feature') {
                    l.visible = layerIds.includes(l.id)
                }
            })
            
            /*
            map2Layers.forEach((l) => {
                if (l.type == 'feature') {
                    l.visible = layerIds.includes(l.id)
                }
            })
            */
            
            activeLayer.visible = true;

            setSwipeLeadingLayersActive(false);
            setSwipeTrailingLayersActive(false);
            
            updateActiveLayerForCompareSettings("leading", true);
            updateActiveLayerForCompareSettings("trailing", true);
        }
    }
    
    function switchLayersForCompare() {
        if (activeCompare && swipeLeadingLayers.length > 0 && swipeTrailingLayers.length > 0) {
            let leading = [...swipeLeadingLayers]
            let trailing = [...swipeTrailingLayers]
            
            let leadingSettings = {...swipeLeadingLayersSettings}
            let trailingSettings  = {...swipeTrailingLayersSettings}

            setSwipeLeadingLayers(trailing)
            setSwipeLeadingLayerTitle(trailing[1].title)
            setSwipeLeadingLayersSettings(trailingSettings);

            setSwipeTrailingLayers(leading)
            setSwipeTrailingLayerTitle(leading[1].title)
            setSwipeTrailingLayersSettings(leadingSettings);
        }
    }
    
    function createSwipeWidget() {
        if (view) {

            let swipe = new Swipe({
                view: view,
                leadingLayers: [],
                trailingLayers: [],
                direction: "horizontal", // swipe widget will move from top to bottom of view
                position: 50, // position set to middle of the view (50%)
                visible: true,
            });
            view.ui.add(swipe);
            setSwipeWidget(swipe);

            if (!swipeActive && !sideBySideActive) {
                setSwipeLeadingLayers([countyBoundaries, activeLayer])
                setSwipeTrailingLayers([countyBoundaries])

                let layer = mapLayers.find((l) => { return l.id == activeLayer.id })
                setSwipeLeadingLayerTitle(layer.title)

                setSwipeActive(true)
                setSideBySideActive(false)

                setSwipeLeadingLayersActive(true)
                setSwipeTrailingLayersActive(false)
                
                updateActiveLayerForCompareSettings("leading");
                updateActiveLayerForCompareSettings("trailing", true);
            }
        }
    }
    
    function refreshSwipeWidget() {
        if (activeCompare && swipeWidget) {
            let offset = -1 * swipeWidgetPositionOffset
            setSwipeWidgetPositionOffset(offset)
            swipeWidget.position = swipeWidget.position + offset
        }
    }

    function openSwipeCompare() {
        setSwipeActive(true)
        setSideBySideActive(false)
        toggleMapSidebarWidget(false)
        createSwipeWidget()
    }

    function openSideBySideCompare() {
        setSwipeActive(false)
        setSideBySideActive(true)
        toggleMapSidebarWidget(true)
        if (swipeWidget) {
            swipeWidget.destroy();
        }
    }

    useEffect(() => {
        if (compareLayerElementClicked == null) {
            if (prevMapType == mapType) {
                
                if (mapType && mapLayers && selectedCategory && selectedVariable) {
                    let groupWuiVulnerability = mapLayers.find((l) => { return l.type == "group" && l.title.includes("WUI Vulnerability") })
                    let groupCategory = groupWuiVulnerability.allLayers.items.find((l) => { return l.type == "group" && l.title.includes(selectedCategory) })
                    
                    if (mapType == 'univariate' && selectedVariable) {
                        let groupLayers = groupCategory.allLayers.items.find((l) => { return l.type == "group" && l.title.includes("Univariate") })
                        let layer = groupLayers.layers.items.find((l) => { return l.title.includes(selectedVariable) })
                        if (layer && layer.type == "group" && selectedMetric) {
                            layer = layer.layers.items.find((l) => { return l.title.includes(selectedMetric) })
                        }
                        console.log(layer)
                        if (layer && layer.type == "feature") {
                            if (!activeCompare) {
                                if (layer && activeLayer) {
                                    activeLayer.visible = false;
                                }
                                layer.visible = true;
                                setLayerLoading(true);
                            }
                            setActiveLayer(layer)
                        }
                        
                    } else if (mapType == 'bivariate' && selectedVariable) {
                        let groupLayers = groupCategory.allLayers.items.find((l) => { return l.type == "group" && l.title.includes("Bivariate") })
                        let layer = groupLayers.layers.items.find((l) => { return l.title.includes(selectedVariable) })
                        if (layer && layer.type == "group" && selectedMetric) {
                            layer = layer.layers.items.find((l) => { return l.title.includes(selectedMetric) })
                        }
                        
                        if (layer && layer.type == "feature") {
                            if (!activeCompare) {
                                if (layer && activeLayer) {
                                    activeLayer.visible = false;
                                }
                                layer.visible = true;
                                setLayerLoading(true);
                            }
                            setActiveLayer(layer)
                        }
                    }

                }
            } else {
                setLayerLegend(null);
                setSelectedCategory(null)
                setSelectedVariable(null)
                setSelectedMetric(null)
                if (activeLayer) {
                    activeLayer.visible = false;
                    setActiveLayer(null)
                }
                setPrevMapType(mapType)
                
            }
        } else {
            setCompareLayerElementClicked(null);
        }
    }, [mapType, selectedCategory, selectedVariable, selectedMetric])
    
    useEffect(() => {
        let options = variables.filter((o) => { return o.category.includes(selectedCategory) });
        setSelectVariables(options);
        
        if (options.length > 0) {
            setSelectedVariable(options[0].id);
        }
        setSelectedMetric(null);
        
    }, [selectedCategory])
    
    useEffect(() => {
        let options = metrics.filter((o) => { return (o.category.includes(selectedCategory) && o.variable.includes(selectedVariable)) || o.variable.includes('*') });
        setSelectMetrics(options);
        
        if (options.length > 0) {
            setSelectedMetric(options[0].id);
        }
        
    }, [selectedVariable])
    
    async function activeViewChangeHandlerMap(jmv: JimuMapView) {
        if (jmv) {
            await jmv.whenAllJimuLayerViewLoaded()
            setView(jmv.view);
        }
    }
    
    return (
        <Container className="wui-vulnerability-widget jimu-widget summary d-flex flex-column h-100 p-0 m-0 bg-white overflow-auto">
            <div style={{padding:"2px 4px"}}>
                <CollapsablePanel 
                    id="wui-vulnerability-pane"
                    label={
                        <div style={{padding:"5px 10px 8px 10px"}}>
                            <FontAwesomeIcon 
                                icon={faHouseFire} 
                                size="m"
                                style={{position:"relative", top:"3px" }}
                            /> 
                            <span style={{position:"relative", marginLeft:"10px", top:"3px", fontSize:"16px"}}>WUI Vulnerability</span>
                        </div>
                    }
                    type="default"
                    defaultIsOpen={false}
                    isOpen={isOpen}
                    style={{ padding:"0px 10px" }}
                    onRequestClose={() => { setIsOpen(false); }}
                    onRequestOpen={() => { setIsOpen(true); sendWidgetMessages() }}
                >
                {widgetLoading &&
                    <Container className="d-flex flex-row align-items-center justify-content-center flex-grow-1 p-0 m-0 position-relative">
                            <div style={{ height: "100px" }}>
                                &nbsp;
                                <Loading
                                    type="SECONDARY"
                                    width={20}
                                    height={20}
                                />
                            </div>
                    </Container>
                }
                {!widgetLoading && (
                        <Container className="control-section p-0 pt-2 pb-2 m-0">
                            <div
                                className='mb-2 pt-2 pb-4'
                            >
                                
                                <div
                                    style={{lineHeight:1.25, fontSize:"14px"}}
                                >
                                Lorem ipsum dolor sit amet. Qui perspiciatis odio quo debitis corporis sit consequatur vitae. Ut maiores corrupti est minus rerum sit aliquid eaque qui dolorum beatae nam consequuntur dolores ad accusamus reprehenderit in assumenda voluptatum. 
                                </div>
                            
                            <div
                                className='mt-4 mb-0 pt-4 pb-4'
                                style={{ borderTop: '1px solid #dddddd'}}
                            >
                                <div className='w-100 d-flex mt-0 mb-1 title2'>
                                    <Tooltip
                                        placement="top-end"
                                        title={ selectedCategory ? tooltips[selectedCategory].main : 'Select a category...' }
                                        showArrow
                                    >
                                        <div style={{ width: "14px" }}>
                                                <InfoOutlined size={14} />
                                        </div>
                                    </Tooltip>
                                    <div style={{position:"relative", marginLeft:"7px", top:"1px"}}>Category</div>
                                </div>
                                <div className="w-100">
                                    <Select
                                        onChange={(e) => {
                                            setSelectedVariable(null);
                                            if (activeLayer) {
                                                activeLayer.visible = false;
                                                setActiveLayer(null)
                                            }
                                            setSelectedCategory(e.target.value);
                                        }}
                                        value={selectedCategory}
                                        placeholder="Select a Category..."
                                    >
                                        {categories.map((m) => {
                                            return <Option value={m.id} style={{ color: "#050505" }}>
                                                        {m.label}
                                                   </Option>
                                        })
                                        }
                                    </Select>
                                </div>
                                
                                
                                <div className='w-100 d-flex mt-2 mb-1 title2'>
                                    <Tooltip
                                        placement="top-end"
                                        title={ selectedCategory && selectedVariable ? tooltips[selectedCategory][selectedVariable] : 'Select a variable...' }
                                        showArrow
                                    >
                                        <div style={{ width: "14px" }}>
                                                <InfoOutlined size={14} />
                                        </div>
                                    </Tooltip>
                                    <div style={{position:"relative", marginLeft:"7px", top:"1px"}}>Variable</div>
                                </div>
                                <div className="w-100">
                                    <Select
                                        onChange={(e) => {
                                            setSelectedVariable(e.target.value);
                                        }}
                                        value={selectedVariable}
                                        placeholder="Select a variable..."
                                    >
                                        {selectVariables.map((m) => {
                                                return <Option value={m.id} style={{ color: "#050505" }}>
                                                            {m.label}
                                                       </Option>
                                            })
                                        }
                                    </Select>
                                </div>
                                
                                {selectedVariable && !['Overall', 'CVI'].includes(selectedVariable) && (
                                    <>
                                        <div className='w-100 d-flex mt-2 mb-1 title2'>
                                            <Tooltip
                                                placement="top-end"
                                                title={ selectedCategory && selectedVariable ? tooltips[selectedCategory][selectedVariable] : 'Select a metric...' }
                                                showArrow
                                            >
                                                <div style={{ width: "14px" }}>
                                                        <InfoOutlined size={14} />
                                                </div>
                                            </Tooltip>
                                            <div style={{position:"relative", marginLeft:"7px", top:"1px"}}>Metric</div>
                                        </div>
                                        <div className="w-100">
                                            <Select
                                                onChange={(e) => {
                                                    setSelectedMetric(e.target.value);
                                                }}
                                                value={selectedMetric}
                                                placeholder="Select a metric..."
                                            >
                                                {selectMetrics.map((m) => {
                                                        return <Option value={m.id} style={{ color: "#050505" }}>
                                                                    {m.label}
                                                               </Option>
                                                    })
                                                }
                                            </Select>
                                        </div>
                                    </>
                                )}
                                
                            </div>
                            
                            {activeLayer && layerLoading && (
                                <div style={{ position: "relative", height: "100px" }}>
                                    &nbsp;
                                    <Loading
                                        type="SECONDARY"
                                        width={20}
                                        height={20}
                                    />
                                </div>
                            )}
                            
                            {activeLayer && !layerLoading && (
                                <div
                                    className='mt-0 mb-5'
                                >
                                    <div 
                                        className='d-flex flex-row w-100 mt-0 mb-1 pt-0 pb-1'
                                    >
                                        <div 
                                            className='m-0 title2'
                                            style={{width: "75px"}}
                                        >
                                        </div>
                                        <div
                                            className='m-0'
                                            style={{width: "245px"}}
                                        >
                                            {layerLegend}
                                        </div>
                                    </div>
                                    <div
                                        style={{lineHeight:1.25, fontSize:"14px"}}
                                    >
                                    Lorem ipsum dolor sit amet. Qui perspiciatis odio quo debitis corporis sit consequatur vitae. Ut maiores corrupti est minus rerum sit aliquid. 
                                    </div>
                                    </div>
                                )
                            }
                            
                            
                            <div className='w-100 d-flex mt-2 mb-1 pt-4 title2'
                                style={{ borderTop: '1px solid #dddddd'}}
                            >
                                    <Tooltip
                                        placement="top-end"
                                        title="This can show more information"
                                        showArrow
                                    >
                                        <div style={{ width: "14px" }}>
                                                <InfoOutlined size={14} />
                                        </div>
                                    </Tooltip>
                                    <div style={{position:"relative", marginLeft:"7px", top:"1px"}}>Map Type</div>
                                </div>
                                <AdvancedButtonGroup
                                    size="sm"
                                    variant="contained"
                                    className="w-100"
                                >
                                    <Button
                                        active={mapType == 'univariate'}
                                        onClick={() => { setMapType('univariate') }}
                                        style={{ width: '50%' }}
                                    >
                                        Univariate
                                    </Button>
                                    <Button
                                        active={mapType == 'bivariate'}
                                        onClick={() => { setMapType('bivariate') }}
                                        style={{ width: '50%' }}
                                    >
                                        Bivariate
                                    </Button>
                                </AdvancedButtonGroup>
                            
                            </div>
                            
                            {includeSwipeCompare && !hideSwipeCompare && (
                                <>
                                    <div
                                        className='mt-2 mb-0 pt-4 pb-0'
                                        style={{ borderTop: '1px solid #dddddd' }}
                                    >
                                        <div
                                            className="w-100 d-flex mt-0 title2"
                                        >
                                            <div
                                                className="d-flex"
                                                style={{ width: '200px' }}
                                            >
                                                <WidgetSwipeOutlined size="m" />
                                                <div style={{ position: "relative", marginLeft: "7px", top: "0px" }}>Swipe Compare</div>
                                            </div>
                                            <div
                                                className="d-flex"
                                                style={{ flexGrow: 1, justifyContent: "flex-end", cursor: "pointer" }}
                                            >
                                                <Switch
                                                    onChange={(e) => {
                                                        setActiveCompare(!activeCompare);
                                                    }}
                                                    checked={activeCompare}
                                                    disabled={!activeLayer}
                                                />
                                            </div>

                                        </div>

                                        {activeCompare && (
                                            <div className="w-100 mt-0 mb-6">
                                                <div
                                                    id="compare-growth-layers"
                                                    className="w-100 mt-0 d-flex mb-2"
                                                >

                                                    <div
                                                        className="d-flex align-items-center"
                                                        style={{ width: "24px" }}
                                                    >
                                                        <ArrowUpDownOutlined
                                                            size="m"
                                                            style={{ cursor: "pointer" }}
                                                            onClick={() => {
                                                                switchLayersForCompare()
                                                            }}
                                                        />
                                                    </div>
                                                    <div style={{ flexGrow: 1 }}>
                                                        <div
                                                            className={`d-flex mt-2 compare-layer ${swipeLeadingLayersActive ? "compare-layer-active" : ""}`}
                                                            style={{ height: "40px" }}
                                                            onClick={() => {
                                                                setSwipeLeadingLayersActive(true);
                                                                setSwipeTrailingLayersActive(false);
                                                                setCompareLayerElementClicked("leading");
                                                            }}
                                                        >
                                                            <div
                                                                className="d-flex align-items-center pl-2"
                                                                style={{ flexGrow: 1 }}
                                                            >
                                                                {swipeLeadingLayerTitle
                                                                    ? swipeLeadingLayerTitle
                                                                    : (
                                                                        <span style={{ color: "rgb(112,112,112)" }}>
                                                                            Click to add a layer to left map ...
                                                                        </span>)
                                                                }
                                                            </div>
                                                            {swipeLeadingLayerTitle
                                                                ? <div
                                                                    className="d-flex justify-content-center align-items-center"
                                                                    style={{ width: "32px", cursor: "pointer" }}
                                                                    onClick={() => {
                                                                        removeActiveLayerFromCompare("leading");
                                                                    }}
                                                                >
                                                                    <CloseOutlined size="s" />
                                                                </div>
                                                                : <div
                                                                    className="d-flex justify-content-center align-items-center"
                                                                    style={{ width: "32px", cursor: "pointer" }}
                                                                    onClick={() => {
                                                                        addActiveLayerToCompare("leading");
                                                                    }}
                                                                >
                                                                    <FeatureLayerViewOutlined size="m" />
                                                                </div>
                                                            }
                                                        </div>
                                                        <div
                                                            className={`d-flex mt-2 compare-layer ${swipeTrailingLayersActive ? "compare-layer-active" : ""}`}
                                                            style={{ height: "40px" }}
                                                            onClick={() => {
                                                                setSwipeLeadingLayersActive(false);
                                                                setSwipeTrailingLayersActive(true);
                                                                setCompareLayerElementClicked("trailing");
                                                            }}
                                                        >
                                                            <div
                                                                className="d-flex align-items-center pl-2"
                                                                style={{ flexGrow: 1 }}
                                                            >
                                                                {swipeTrailingLayerTitle
                                                                    ? swipeTrailingLayerTitle
                                                                    : (<span style={{ color: "rgb(112,112,112)" }}>
                                                                        Click to add a layer to right map ...
                                                                    </span>)
                                                                }
                                                            </div>
                                                            {swipeTrailingLayerTitle
                                                                ? <div
                                                                    className="d-flex justify-content-center align-items-center"
                                                                    style={{ width: "32px", cursor: "pointer" }}
                                                                    onClick={() => {
                                                                        removeActiveLayerFromCompare("trailing");
                                                                    }}
                                                                >
                                                                    <CloseOutlined size="s" />
                                                                </div>
                                                                : <div
                                                                    className="d-flex justify-content-center align-items-center"
                                                                    style={{ width: "32px", cursor: "pointer" }}
                                                                    onClick={() => {
                                                                        addActiveLayerToCompare("trailing");
                                                                    }}
                                                                >
                                                                    <FeatureLayerViewOutlined size="m" />
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div className="d-flex mt-4" style={{ justifyContent: "space-evenly", display: "none" }}>
                                                    <Button
                                                        className={`${swipeActive ? "compare-active" : ""}`}
                                                        color="default"
                                                        size="sm"
                                                        variant="text"
                                                        onClick={() => {
                                                            openSwipeCompare()
                                                        }}
                                                        style={{
                                                            borderWidth: "0px"
                                                        }}
                                                    >
                                                        <WidgetSwipeOutlined size="s" />
                                                        Swipe
                                                    </Button>
                                                    <Button
                                                        className={`${sideBySideActive ? "compare-active" : ""}`}
                                                        color="default"
                                                        size="sm"
                                                        variant="text"
                                                        onClick={() => {
                                                            openSideBySideCompare()
                                                        }}
                                                        style={{
                                                            borderWidth: "0px"
                                                        }}
                                                    >
                                                        <MergeLayersOutlined size="s" />
                                                        Side by Side
                                                    </Button>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </>
                            )}
                            <div
                                className='mt-3 mb-0 pt-4 pb-0'
                                style={{ borderTop: '1px solid #dddddd' }}
                            >
                                <div
                                    className="w-100 mt-0"
                                >
                                    <Label>
                                        <Checkbox
                                            checked={wuiChecked}
                                            onClick={() => {
                                                setWuiChecked(!wuiChecked)
                                            }}
                                        />
                                        <span style={{ marginLeft: '10px' }}>Show Non-WUI Areas</span>
                                    </Label>
                                </div>
                            </div>
                        </Container>
                    )
                }
                <div className="jimu-widget">
                    {props.useMapWidgetIds && props.useMapWidgetIds.length > 0 && (
                        <JimuMapViewComponent
                            useMapWidgetId={props.useMapWidgetIds?.[0]}
                            onActiveViewChange={activeViewChangeHandlerMap}
                        />
                    )}

                </div>
                <div className="jimu-widget">
                    {props.useDataSources && props.useDataSources.length > 0 && (
                        <DataSourceComponent
                            useDataSource={props.useDataSources?.[0]}
                            onDataSourceCreated={(ds) => { setDataSource(ds) }}
                        />
                    )}
                </div>
            </div>
        </Container>
    )
}
